// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NexaSoft.Club.Infrastructure;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NexaSoft.Club.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NexaSoft.Club.Domain.Auth.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires");

                    b.Property<bool>("Revoked")
                        .HasColumnType("boolean")
                        .HasColumnName("revoked");

                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_refresh_tokens");

                    b.HasIndex("Expires")
                        .HasDatabaseName("ix_expires");

                    b.HasIndex("Token")
                        .HasDatabaseName("ix_token");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_id");

                    b.ToTable("refresh_tokens", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.AccountingEntries.AccountingEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AdjustmentReason")
                        .HasColumnType("text")
                        .HasColumnName("adjustment_reason");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateOnly>("EntryDate")
                        .HasColumnType("date")
                        .HasColumnName("entry_date");

                    b.Property<string>("EntryNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("entry_number");

                    b.Property<bool>("IsAdjusted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_adjusted");

                    b.Property<long?>("SourceId")
                        .HasColumnType("bigint")
                        .HasColumnName("source_id");

                    b.Property<long>("SourceModuleId")
                        .HasColumnType("bigint")
                        .HasColumnName("source_module_id");

                    b.Property<int>("StateAccountingEntry")
                        .HasColumnType("integer")
                        .HasColumnName("state_accounting_entry");

                    b.Property<decimal>("TotalCredit")
                        .HasColumnType("numeric")
                        .HasColumnName("total_credit");

                    b.Property<decimal>("TotalDebit")
                        .HasColumnType("numeric")
                        .HasColumnName("total_debit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_accounting_entries");

                    b.HasIndex("EntryDate")
                        .HasDatabaseName("ix_accountingentry_entrydate");

                    b.HasIndex("EntryNumber")
                        .HasDatabaseName("ix_accountingentry_entrynumber");

                    b.HasIndex("SourceModuleId")
                        .HasDatabaseName("ix_accountingentry_sourcemodule");

                    b.HasIndex("SourceModuleId", "SourceId")
                        .HasDatabaseName("idx_accounting_entries_source");

                    b.ToTable("accounting_entries", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.AccountingEntries.AccountingEntryItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountingChartId")
                        .HasColumnType("bigint")
                        .HasColumnName("accounting_chart_id");

                    b.Property<long>("AccountingEntryId")
                        .HasColumnType("bigint")
                        .HasColumnName("accounting_entry_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("credit_amount");

                    b.Property<decimal>("DebitAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("debit_amount");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)")
                        .HasColumnName("description");

                    b.Property<int>("StateEntryItem")
                        .HasColumnType("integer")
                        .HasColumnName("state_entry_item");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_accounting_entry_items");

                    b.HasIndex("AccountingChartId")
                        .HasDatabaseName("ix_accounting_entry_items_chart_id");

                    b.HasIndex("AccountingEntryId")
                        .HasDatabaseName("ix_accounting_entry_items_entry_id");

                    b.ToTable("accounting_entry_items", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.EntryItems.EntryItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountingChartId")
                        .HasColumnType("bigint")
                        .HasColumnName("accounting_chart_id");

                    b.Property<long>("AccountingEntryId")
                        .HasColumnType("bigint")
                        .HasColumnName("accounting_entry_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("credit_amount");

                    b.Property<decimal>("DebitAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("debit_amount");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("StateEntryItem")
                        .HasColumnType("integer")
                        .HasColumnName("state_entry_item");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_entry_items");

                    b.HasIndex("AccountingChartId")
                        .HasDatabaseName("ix_entryitem_accountid");

                    b.HasIndex("AccountingEntryId")
                        .HasDatabaseName("ix_entryitem_entryid");

                    b.ToTable("entry_items", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.ExpensesVouchers.ExpenseVoucher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountingEntryId")
                        .HasColumnType("bigint")
                        .HasColumnName("accounting_entry_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("ExpenseAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("expense_account_id");

                    b.Property<DateOnly>("IssueDate")
                        .HasColumnType("date")
                        .HasColumnName("issue_date");

                    b.Property<int>("StateExpenseVoucher")
                        .HasColumnType("integer")
                        .HasColumnName("state_expense_voucher");

                    b.Property<string>("SupplierName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("supplier_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.Property<string>("VoucherNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("voucher_number");

                    b.HasKey("Id")
                        .HasName("pk_expenses_vouchers");

                    b.HasIndex("AccountingEntryId")
                        .HasDatabaseName("ix_expenses_vouchers_accounting_entry_id");

                    b.HasIndex("ExpenseAccountId")
                        .HasDatabaseName("ix_expenses_vouchers_expense_account_id");

                    b.HasIndex("IssueDate")
                        .HasDatabaseName("ix_expensevoucher_issuedate");

                    b.HasIndex("VoucherNumber")
                        .HasDatabaseName("ix_expensevoucher_vouchernumber");

                    b.ToTable("expenses_vouchers", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.FamilyMembers.FamilyMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Dni")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("dni");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsAuthorized")
                        .HasColumnType("boolean")
                        .HasColumnName("is_authorized");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_id");

                    b.Property<string>("Relationship")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("relationship");

                    b.Property<int>("StateFamilyMember")
                        .HasColumnType("integer")
                        .HasColumnName("state_family_member");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_family_members");

                    b.HasIndex("Dni")
                        .HasDatabaseName("ix_familymember_dni");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_familymember_memberid");

                    b.HasIndex("Relationship")
                        .HasDatabaseName("ix_familymember_relationship");

                    b.ToTable("family_members", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.MemberFees.MemberFee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<DateOnly>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_id");

                    b.Property<long?>("MemberTypeFeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_type_fee_id");

                    b.Property<decimal>("PaidAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("paid_amount");

                    b.Property<string>("Period")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("period");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("remaining_amount");

                    b.Property<int>("StateMemberFee")
                        .HasColumnType("integer")
                        .HasColumnName("state_member_fee");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_member_fees");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_memberfee_memberid");

                    b.HasIndex("MemberTypeFeeId")
                        .HasDatabaseName("ix_memberfee_configid");

                    b.HasIndex("Period")
                        .HasDatabaseName("ix_memberfee_period");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_memberfee_status");

                    b.HasIndex("MemberId", "StatusId")
                        .HasDatabaseName("idx_member_fees_member_status");

                    b.ToTable("member_fees", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.MemberVisits.MemberVisit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CheckInBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("check_in_by");

                    b.Property<string>("CheckOutBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("check_out_by");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<TimeOnly?>("EntryTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("entry_time");

                    b.Property<TimeOnly?>("ExitTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("exit_time");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_id");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("notes");

                    b.Property<string>("QrCodeUsed")
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)")
                        .HasColumnName("qr_code_used");

                    b.Property<int>("StateMemberVisit")
                        .HasColumnType("integer")
                        .HasColumnName("state_member_visit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.Property<DateOnly?>("VisitDate")
                        .HasColumnType("date")
                        .HasColumnName("visit_date");

                    b.Property<int>("VisitType")
                        .HasColumnType("integer")
                        .HasColumnName("visit_type");

                    b.HasKey("Id")
                        .HasName("pk_member_visits");

                    b.HasIndex("CheckInBy")
                        .HasDatabaseName("ix_membervisit_checkinby");

                    b.HasIndex("EntryTime")
                        .HasDatabaseName("ix_membervisit_entrytime");

                    b.HasIndex("ExitTime")
                        .HasDatabaseName("ix_membervisit_exittime");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_membervisit_memberid");

                    b.HasIndex("VisitDate")
                        .HasDatabaseName("ix_membervisit_visitdate");

                    b.ToTable("member_visits", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.Members.Member", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<long>("DepartamentId")
                        .HasColumnType("bigint")
                        .HasColumnName("departament_id");

                    b.Property<long>("DistrictId")
                        .HasColumnType("bigint")
                        .HasColumnName("district_id");

                    b.Property<string>("Dni")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("dni");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<bool>("EntryFeePaid")
                        .HasColumnType("boolean")
                        .HasColumnName("entry_fee_paid");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<DateOnly>("JoinDate")
                        .HasColumnType("date")
                        .HasColumnName("join_date");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_payment_date");

                    b.Property<long>("MemberStatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_status_id");

                    b.Property<long>("MemberTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_type_id");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<long>("ProvinceId")
                        .HasColumnType("bigint")
                        .HasColumnName("province_id");

                    b.Property<int>("StateMember")
                        .HasColumnType("integer")
                        .HasColumnName("state_member");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_members");

                    b.HasIndex("DepartamentId")
                        .HasDatabaseName("ix_members_departament_id");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_members_district_id");

                    b.HasIndex("Dni")
                        .HasDatabaseName("ix_member_dni");

                    b.HasIndex("Email")
                        .HasDatabaseName("ix_member_email");

                    b.HasIndex("MemberStatusId")
                        .HasDatabaseName("ix_member_statusid");

                    b.HasIndex("MemberTypeId")
                        .HasDatabaseName("ix_member_membertypeid");

                    b.HasIndex("ProvinceId")
                        .HasDatabaseName("ix_members_province_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_members_status_id");

                    b.ToTable("members", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.Members.MemberPin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("device_id");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_used");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_id");

                    b.Property<string>("Pin")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("pin");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.Property<DateTime?>("UsedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("used_at");

                    b.HasKey("Id")
                        .HasName("pk_member_pins");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("ix_memberpins_expiresat");

                    b.HasIndex("IsUsed")
                        .HasDatabaseName("ix_memberpins_isused");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_memberpins_memberid");

                    b.HasIndex("Pin")
                        .HasDatabaseName("ix_memberpins_pin");

                    b.ToTable("member_pins", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.Members.MemberRefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_revoked");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_id");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("revoked_at");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("token");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_member_refresh_tokens");

                    b.HasIndex("ExpiresAt")
                        .HasDatabaseName("ix_refresh_token_expiresat");

                    b.HasIndex("IsRevoked")
                        .HasDatabaseName("ix_refresh_token_isrevoked");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_refresh_token_memberid");

                    b.HasIndex("Token")
                        .IsUnique()
                        .HasDatabaseName("ix_refresh_token_token");

                    b.ToTable("member_refresh_tokens", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.Payments.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountingEntryId")
                        .HasColumnType("bigint")
                        .HasColumnName("accounting_entry_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<decimal>("CreditBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("credit_balance");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<long>("DocumentTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("document_type_id");

                    b.Property<bool>("IsPartial")
                        .HasColumnType("boolean")
                        .HasColumnName("is_partial");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_id");

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("date")
                        .HasColumnName("payment_date");

                    b.Property<long>("PaymentMethodId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_method_id");

                    b.Property<string>("ReceiptNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("receipt_number");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("reference_number");

                    b.Property<int>("StatePayment")
                        .HasColumnType("integer")
                        .HasColumnName("state_payment");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_payments");

                    b.HasIndex("AccountingEntryId")
                        .HasDatabaseName("ix_payment_accountingentryid");

                    b.HasIndex("DocumentTypeId")
                        .HasDatabaseName("ix_payments_document_type_id");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_payment_memberid");

                    b.HasIndex("PaymentDate")
                        .HasDatabaseName("ix_payment_paymentdate");

                    b.HasIndex("PaymentMethodId")
                        .HasDatabaseName("ix_payment_paymentmethod");

                    b.HasIndex("ReceiptNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_payment_receiptnumber");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_payments_status_id");

                    b.HasIndex("MemberId", "PaymentDate")
                        .HasDatabaseName("idx_payments_member_date");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.Payments.PaymentItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<long>("MemberFeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_fee_id");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_id");

                    b.Property<int>("StatePaymentItem")
                        .HasColumnType("integer")
                        .HasColumnName("state_payment_item");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_payment_items");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_paymentitem_createdat");

                    b.HasIndex("MemberFeeId")
                        .HasDatabaseName("ix_paymentitem_memberfeeid");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("ix_paymentitem_paymentid");

                    b.HasIndex("StatePaymentItem")
                        .HasDatabaseName("ix_paymentitem_state");

                    b.HasIndex("PaymentId", "MemberFeeId")
                        .IsUnique()
                        .HasDatabaseName("idx_paymentitems_payment_fee")
                        .HasFilter("deleted_at IS NULL");

                    b.ToTable("payment_items", null, t =>
                        {
                            t.HasCheckConstraint("chk_paymentitem_amount_positive", "amount > 0");
                        });
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.Reservations.Reservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountingEntryId")
                        .HasColumnType("bigint")
                        .HasColumnName("accounting_entry_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<long>("DocumentTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("document_type_id");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<long>("MemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_id");

                    b.Property<long>("PaymentMethodId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_method_id");

                    b.Property<string>("ReceiptNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("receipt_number");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("reference_number");

                    b.Property<long>("SpaceAvailabilityId")
                        .HasColumnType("bigint")
                        .HasColumnName("space_availability_id");

                    b.Property<long>("SpaceRateId")
                        .HasColumnType("bigint")
                        .HasColumnName("space_rate_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.Property<int>("StateReservation")
                        .HasColumnType("integer")
                        .HasColumnName("state_reservation");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_reservations");

                    b.HasIndex("AccountingEntryId")
                        .HasDatabaseName("ix_reservation_accountingentryid");

                    b.HasIndex("DocumentTypeId")
                        .HasDatabaseName("ix_reservations_document_type_id");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_reservation_memberid");

                    b.HasIndex("PaymentMethodId")
                        .HasDatabaseName("ix_reservations_payment_method_id");

                    b.HasIndex("SpaceAvailabilityId")
                        .HasDatabaseName("ix_reservations_space_availability_id");

                    b.HasIndex("SpaceRateId")
                        .HasDatabaseName("ix_reservation_spacerateid");

                    b.HasIndex("StartTime")
                        .HasDatabaseName("ix_reservation_starttime");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_reservation_status");

                    b.ToTable("reservations", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.AccountTypes.AccountType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name");

                    b.Property<int>("StateAccountType")
                        .HasColumnType("integer")
                        .HasColumnName("state_account_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_account_types");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_accounttype_name");

                    b.ToTable("account_types", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.AccountingCharts.AccountingChart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("account_code");

                    b.Property<string>("AccountName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("account_name");

                    b.Property<long>("AccountTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("account_type_id");

                    b.Property<bool>("AllowsTransactions")
                        .HasColumnType("boolean")
                        .HasColumnName("allows_transactions");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<long?>("ParentAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_account_id");

                    b.Property<int>("StateAccountingChart")
                        .HasColumnType("integer")
                        .HasColumnName("state_accounting_chart");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_accounting_charts");

                    b.HasIndex("AccountCode")
                        .HasDatabaseName("ix_accountingchart_accountcode");

                    b.HasIndex("AccountTypeId")
                        .HasDatabaseName("ix_accountingchart_accounttype");

                    b.HasIndex("AllowsTransactions")
                        .HasDatabaseName("ix_accountingchart_allowstransactions");

                    b.HasIndex("Level")
                        .HasDatabaseName("ix_accountingchart_level");

                    b.HasIndex("ParentAccountId")
                        .HasDatabaseName("ix_accounting_charts_parent_account_id");

                    b.ToTable("accounting_charts", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Contadores.Contador", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Agrupador")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("agrupador");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Entidad")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("entidad");

                    b.Property<string>("Prefijo")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("prefijo");

                    b.Property<string>("TipoDato")
                        .HasColumnType("text")
                        .HasColumnName("tipo_dato");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.Property<long>("ValorActual")
                        .HasMaxLength(16)
                        .HasColumnType("bigint")
                        .HasColumnName("valor_actual");

                    b.Property<int?>("ValorRpeticion")
                        .HasColumnType("integer")
                        .HasColumnName("valor_rpeticion");

                    b.HasKey("Id")
                        .HasName("pk_contadores");

                    b.HasIndex("Entidad", "Prefijo")
                        .HasDatabaseName("ix_contador_entidad_prefijo");

                    b.ToTable("contadores", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.DocumentTypes.DocumentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name");

                    b.Property<string>("Serie")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("serie");

                    b.Property<int>("StateDocumentType")
                        .HasColumnType("integer")
                        .HasColumnName("state_document_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_document_types");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_documenttype_name");

                    b.HasIndex("Serie")
                        .HasDatabaseName("ix_documenttype_serie");

                    b.ToTable("document_types", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.FeeConfigurations.FeeConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AppliesToFamily")
                        .HasColumnType("boolean")
                        .HasColumnName("applies_to_family");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<decimal?>("DefaultAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("default_amount");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<int?>("DueDay")
                        .HasColumnType("integer")
                        .HasColumnName("due_day");

                    b.Property<string>("FeeName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("fee_name");

                    b.Property<long?>("IncomeAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("income_account_id");

                    b.Property<bool>("IsVariable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_variable");

                    b.Property<long>("PeriodicityId")
                        .HasColumnType("bigint")
                        .HasColumnName("periodicity_id");

                    b.Property<int>("Priority")
                        .HasColumnType("integer")
                        .HasColumnName("priority");

                    b.Property<int>("StateFeeConfiguration")
                        .HasColumnType("integer")
                        .HasColumnName("state_fee_configuration");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_fee_configurations");

                    b.HasIndex("FeeName")
                        .HasDatabaseName("ix_feeconfiguration_feename");

                    b.HasIndex("IncomeAccountId")
                        .HasDatabaseName("ix_fee_configurations_income_account_id");

                    b.HasIndex("PeriodicityId")
                        .HasDatabaseName("ix_feeconfiguration_periodicity");

                    b.ToTable("fee_configurations", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.FeeConfigurations.MemberTypeFee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<long>("FeeConfigurationId")
                        .HasColumnType("bigint")
                        .HasColumnName("fee_configuration_id");

                    b.Property<long>("MemberTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_type_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_member_types_fees");

                    b.HasIndex("FeeConfigurationId")
                        .HasDatabaseName("ix_member_types_fees_fee_configuration_id");

                    b.HasIndex("MemberTypeId")
                        .HasDatabaseName("ix_membertype_id");

                    b.HasIndex("MemberTypeId", "FeeConfigurationId")
                        .HasDatabaseName("ix_membertype_fee_configuration");

                    b.ToTable("member_types_fees", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.MemberStatuses.MemberStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("CanAccess")
                        .HasColumnType("boolean")
                        .HasColumnName("can_access");

                    b.Property<bool>("CanParticipate")
                        .HasColumnType("boolean")
                        .HasColumnName("can_participate");

                    b.Property<bool>("CanReserve")
                        .HasColumnType("boolean")
                        .HasColumnName("can_reserve");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("StateMemberStatus")
                        .HasColumnType("integer")
                        .HasColumnName("state_member_status");

                    b.Property<string>("StatusName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_member_statuses");

                    b.HasIndex("StatusName")
                        .HasDatabaseName("ix_memberstatus_statusname");

                    b.ToTable("member_statuses", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.MemberTypes.MemberType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal?>("FamilyDiscountRate")
                        .HasColumnType("numeric")
                        .HasColumnName("family_discount_rate");

                    b.Property<bool?>("HasFamilyDiscount")
                        .HasColumnType("boolean")
                        .HasColumnName("has_family_discount");

                    b.Property<int?>("MaxFamilyMembers")
                        .HasColumnType("integer")
                        .HasColumnName("max_family_members");

                    b.Property<int>("StateMemberType")
                        .HasColumnType("integer")
                        .HasColumnName("state_member_type");

                    b.Property<string>("TypeName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_member_types");

                    b.HasIndex("TypeName")
                        .HasDatabaseName("ix_membertype_typename");

                    b.ToTable("member_types", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Menus.MenuItemOption", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<int>("EstadoMenu")
                        .HasColumnType("integer")
                        .HasColumnName("estado_menu");

                    b.Property<string>("Icon")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("icon");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("label");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<string>("Route")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("route");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_menu_item_options");

                    b.HasIndex("Label")
                        .HasDatabaseName("ix_menu_label");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_menu_item_options_parent_id");

                    b.ToTable("menu_item_options", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Menus.MenuRole", b =>
                {
                    b.Property<long>("MenuItemOptionId")
                        .HasColumnType("bigint")
                        .HasColumnName("menu_item_option_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("MenuItemOptionId", "RoleId")
                        .HasName("pk_menu_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_menu_roles_role_id");

                    b.ToTable("menu_roles", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.PaymentTypes.PaymentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name");

                    b.Property<int>("StatePaymentType")
                        .HasColumnType("integer")
                        .HasColumnName("state_payment_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_payment_types");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_paymenttype_name");

                    b.ToTable("payment_types", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Periodicities.Periodicity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name");

                    b.Property<int>("StatePeriodicity")
                        .HasColumnType("integer")
                        .HasColumnName("state_periodicity");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_periodicities");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_periodicity_name");

                    b.ToTable("periodicities", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Permissions.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("ReferenciaControl")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("referencia_control");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_permission_name");

                    b.HasIndex("ReferenciaControl")
                        .HasDatabaseName("ix_permission_referenciacontrol");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Roles.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_role_name");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.SourceModules.SourceModule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name");

                    b.Property<int>("StateSourceModule")
                        .HasColumnType("integer")
                        .HasColumnName("state_source_module");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_source_modules");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_sourcemodule_name");

                    b.ToTable("source_modules", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.SpaceAvailabilities.SpaceAvailability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer")
                        .HasColumnName("day_of_week");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("interval")
                        .HasColumnName("end_time");

                    b.Property<long>("SpaceId")
                        .HasColumnType("bigint")
                        .HasColumnName("space_id");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("interval")
                        .HasColumnName("start_time");

                    b.Property<int>("StateSpaceAvailability")
                        .HasColumnType("integer")
                        .HasColumnName("state_space_availability");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_space_availabilities");

                    b.HasIndex("SpaceId")
                        .HasDatabaseName("ix_spaceavailability_spaceid");

                    b.ToTable("space_availabilities", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.SpacePhotos.SpacePhoto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)")
                        .HasColumnName("description");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("PhotoUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("photo_url");

                    b.Property<long>("SpaceId")
                        .HasColumnType("bigint")
                        .HasColumnName("space_id");

                    b.Property<int>("StateSpacePhoto")
                        .HasColumnType("integer")
                        .HasColumnName("state_space_photo");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_space_photos");

                    b.HasIndex("SpaceId")
                        .HasDatabaseName("ix_spacephoto_spaceid");

                    b.ToTable("space_photos", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.SpaceRates.SpaceRate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<long>("MemberTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_type_id");

                    b.Property<decimal>("Rate")
                        .HasColumnType("numeric")
                        .HasColumnName("rate");

                    b.Property<long>("SpaceId")
                        .HasColumnType("bigint")
                        .HasColumnName("space_id");

                    b.Property<int>("StateSpaceRate")
                        .HasColumnType("integer")
                        .HasColumnName("state_space_rate");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_space_rates");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_spacerate_isactive");

                    b.HasIndex("MemberTypeId")
                        .HasDatabaseName("ix_spacerate_membertypeid");

                    b.HasIndex("SpaceId")
                        .HasDatabaseName("ix_spacerate_spaceid");

                    b.ToTable("space_rates", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.SpaceTypes.SpaceType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name");

                    b.Property<int>("StateSpaceType")
                        .HasColumnType("integer")
                        .HasColumnName("state_space_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_space_types");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_spacetype_name");

                    b.ToTable("space_types", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Spaces.Space", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long?>("IncomeAccountId")
                        .HasColumnType("bigint")
                        .HasColumnName("income_account_id");

                    b.Property<int>("MaxReservationHours")
                        .HasColumnType("integer")
                        .HasColumnName("max_reservation_hours");

                    b.Property<bool>("RequiresApproval")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_approval");

                    b.Property<string>("SpaceName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("space_name");

                    b.Property<long>("SpaceTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("space_type_id");

                    b.Property<decimal>("StandardRate")
                        .HasColumnType("numeric")
                        .HasColumnName("standard_rate");

                    b.Property<int>("StateSpace")
                        .HasColumnType("integer")
                        .HasColumnName("state_space");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_spaces");

                    b.HasIndex("IncomeAccountId")
                        .HasDatabaseName("ix_spaces_income_account_id");

                    b.HasIndex("SpaceName")
                        .HasDatabaseName("ix_space_spacename");

                    b.HasIndex("SpaceTypeId")
                        .HasDatabaseName("ix_space_spacetype");

                    b.ToTable("spaces", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Statuses.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name");

                    b.Property<int>("StateStatus")
                        .HasColumnType("integer")
                        .HasColumnName("state_status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_statuses");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_status_name");

                    b.ToTable("statuses", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Ubigeos.Ubigeo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(180)
                        .HasColumnType("character varying(180)")
                        .HasColumnName("description");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id");

                    b.Property<int>("StateUbigeo")
                        .HasColumnType("integer")
                        .HasColumnName("state_ubigeo");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_ubigeos");

                    b.HasIndex("Description")
                        .HasDatabaseName("ix_ubigeo_description");

                    b.HasIndex("Level")
                        .HasDatabaseName("ix_ubigeo_level");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_ubigeos_parent_id");

                    b.HasIndex("Level", "Description")
                        .HasDatabaseName("ix_ubigeo_level_description");

                    b.ToTable("ubigeos", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.UserTypes.UserType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)")
                        .HasColumnName("description");

                    b.Property<bool>("IsAdministrative")
                        .HasColumnType("boolean")
                        .HasColumnName("is_administrative");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("name");

                    b.Property<int>("StateUserType")
                        .HasColumnType("integer")
                        .HasColumnName("state_user_type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_user_types");

                    b.HasIndex("IsAdministrative")
                        .HasDatabaseName("ix_usertype_isadministrative");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_usertype_name");

                    b.ToTable("user_types", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Users.RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_rolepermissions_permissionid");

                    b.ToTable("role_permissions", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("BiometricToken")
                        .HasColumnType("text")
                        .HasColumnName("biometric_token");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text")
                        .HasColumnName("device_id");

                    b.Property<string>("Dni")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)")
                        .HasColumnName("dni");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("full_name");

                    b.Property<bool>("HasSetPassword")
                        .HasColumnType("boolean")
                        .HasColumnName("has_set_password");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_date");

                    b.Property<string>("LastName")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)")
                        .HasColumnName("last_name");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint")
                        .HasColumnName("member_id");

                    b.Property<string>("Password")
                        .HasMaxLength(220)
                        .HasColumnType("character varying(220)")
                        .HasColumnName("password");

                    b.Property<DateTime?>("PasswordSetDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_set_date");

                    b.Property<string>("Phone")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("phone");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_url");

                    b.Property<string>("QrCode")
                        .HasColumnType("text")
                        .HasColumnName("qr_code");

                    b.Property<DateOnly?>("QrExpiration")
                        .HasColumnType("date")
                        .HasColumnName("qr_expiration");

                    b.Property<string>("QrUrl")
                        .HasColumnType("text")
                        .HasColumnName("qr_url");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserName")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("user_name");

                    b.Property<int>("UserStatus")
                        .HasColumnType("integer")
                        .HasColumnName("user_status");

                    b.Property<long>("UserTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_type_id");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Dni")
                        .HasDatabaseName("ix_user_userdni");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email");

                    b.HasIndex("FullName")
                        .HasDatabaseName("ix_user_fullname");

                    b.HasIndex("MemberId")
                        .HasDatabaseName("ix_users_member_id");

                    b.HasIndex("UserName")
                        .HasDatabaseName("ix_user_username");

                    b.HasIndex("UserTypeId")
                        .HasDatabaseName("ix_users_user_type_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Users.UserQrHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("deleted_by");

                    b.Property<DateOnly?>("ExpirationDate")
                        .HasColumnType("date")
                        .HasColumnName("expiration_date");

                    b.Property<string>("QrCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("qr_code");

                    b.Property<string>("QrUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("qr_url");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)")
                        .HasColumnName("updated_by");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_qr_historys");

                    b.HasIndex("ExpirationDate")
                        .HasDatabaseName("ix_userqrhistory_expirationdate");

                    b.HasIndex("QrCode")
                        .HasDatabaseName("ix_userqrhistory_qrcode");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userqrhistory_userid");

                    b.ToTable("user_qr_historys", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Users.UserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean")
                        .HasColumnName("is_default");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_userroles_roleid");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.AccountingEntries.AccountingEntry", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Masters.SourceModules.SourceModule", "SourceModule")
                        .WithMany()
                        .HasForeignKey("SourceModuleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_accounting_entries_source_module_source_module_id");

                    b.Navigation("SourceModule");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.AccountingEntries.AccountingEntryItem", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Masters.AccountingCharts.AccountingChart", "AccountingChart")
                        .WithMany()
                        .HasForeignKey("AccountingChartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_accounting_entry_items_accounting_charts");

                    b.HasOne("NexaSoft.Club.Domain.Features.AccountingEntries.AccountingEntry", "AccountingEntry")
                        .WithMany()
                        .HasForeignKey("AccountingEntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_accounting_entry_items_accounting_entries");

                    b.Navigation("AccountingChart");

                    b.Navigation("AccountingEntry");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.EntryItems.EntryItem", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Masters.AccountingCharts.AccountingChart", "AccountingChart")
                        .WithMany()
                        .HasForeignKey("AccountingChartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_entry_items_accounting_charts_accounting_chart_id");

                    b.HasOne("NexaSoft.Club.Domain.Features.AccountingEntries.AccountingEntry", "AccountingEntry")
                        .WithMany()
                        .HasForeignKey("AccountingEntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_entry_items_accounting_entries_accounting_entry_id");

                    b.Navigation("AccountingChart");

                    b.Navigation("AccountingEntry");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.ExpensesVouchers.ExpenseVoucher", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Features.AccountingEntries.AccountingEntry", "AccountingEntry")
                        .WithMany()
                        .HasForeignKey("AccountingEntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_expenses_vouchers_accounting_entries_accounting_entry_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.AccountingCharts.AccountingChart", "ExpenseAccount")
                        .WithMany()
                        .HasForeignKey("ExpenseAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_expenses_vouchers_accounting_charts_expense_account_id");

                    b.Navigation("AccountingEntry");

                    b.Navigation("ExpenseAccount");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.FamilyMembers.FamilyMember", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Features.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_family_members_member_member_id");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.MemberFees.MemberFee", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Features.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_member_fees_members_member_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.FeeConfigurations.MemberTypeFee", "MemberTypeFee")
                        .WithMany()
                        .HasForeignKey("MemberTypeFeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_member_fees_member_type_fee_member_type_fee_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.Statuses.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_member_fees_status_status_id");

                    b.Navigation("Member");

                    b.Navigation("MemberTypeFee");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.MemberVisits.MemberVisit", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Features.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_member_visits_members_member_id");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.Members.Member", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Masters.Ubigeos.Ubigeo", "Departament")
                        .WithMany()
                        .HasForeignKey("DepartamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_members_ubigeo_departament_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.Ubigeos.Ubigeo", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_members_ubigeo_district_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.MemberStatuses.MemberStatus", "MemberStatus")
                        .WithMany()
                        .HasForeignKey("MemberStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_members_member_status_member_status_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.MemberTypes.MemberType", "MemberType")
                        .WithMany()
                        .HasForeignKey("MemberTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_members_member_type_member_type_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.Ubigeos.Ubigeo", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_members_ubigeo_province_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.Statuses.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_members_status_status_id");

                    b.Navigation("Departament");

                    b.Navigation("District");

                    b.Navigation("MemberStatus");

                    b.Navigation("MemberType");

                    b.Navigation("Province");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.Members.MemberPin", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Features.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_member_pins_members");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.Members.MemberRefreshToken", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Features.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_member_refresh_tokens_members_member_id");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.Payments.Payment", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Features.AccountingEntries.AccountingEntry", "AccountingEntry")
                        .WithMany()
                        .HasForeignKey("AccountingEntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_payments_accounting_entries_accounting_entry_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.DocumentTypes.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payments_document_types_document_type_id");

                    b.HasOne("NexaSoft.Club.Domain.Features.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_payments_members_member_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.PaymentTypes.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_payments_payment_type_payment_method_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.Statuses.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_payments_status_status_id");

                    b.Navigation("AccountingEntry");

                    b.Navigation("DocumentType");

                    b.Navigation("Member");

                    b.Navigation("PaymentType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.Payments.PaymentItem", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Features.MemberFees.MemberFee", "MemberFee")
                        .WithMany()
                        .HasForeignKey("MemberFeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_payment_items_member_fees_member_fee_id");

                    b.HasOne("NexaSoft.Club.Domain.Features.Payments.Payment", "Payment")
                        .WithMany("PaymentItems")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payment_items_payments_payment_id");

                    b.Navigation("MemberFee");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.Reservations.Reservation", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Features.AccountingEntries.AccountingEntry", "AccountingEntry")
                        .WithMany()
                        .HasForeignKey("AccountingEntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_reservations_accounting_entries_accounting_entry_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.DocumentTypes.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_document_types_document_type_id");

                    b.HasOne("NexaSoft.Club.Domain.Features.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_members_member_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.PaymentTypes.PaymentType", "PaymentType")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_payment_types_payment_method_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.SpaceAvailabilities.SpaceAvailability", "SpaceAvailability")
                        .WithMany()
                        .HasForeignKey("SpaceAvailabilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_space_availability_space_availability_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.SpaceRates.SpaceRate", "SpaceRate")
                        .WithMany()
                        .HasForeignKey("SpaceRateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_reservations_space_rate_space_rate_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.Statuses.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_reservations_status_status_id");

                    b.Navigation("AccountingEntry");

                    b.Navigation("DocumentType");

                    b.Navigation("Member");

                    b.Navigation("PaymentType");

                    b.Navigation("SpaceAvailability");

                    b.Navigation("SpaceRate");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.AccountingCharts.AccountingChart", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Masters.AccountTypes.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_accounting_charts_account_type_account_type_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.AccountingCharts.AccountingChart", "ParentAccount")
                        .WithMany()
                        .HasForeignKey("ParentAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_accounting_charts_accounting_charts_parent_account_id");

                    b.Navigation("AccountType");

                    b.Navigation("ParentAccount");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.FeeConfigurations.FeeConfiguration", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Masters.AccountingCharts.AccountingChart", "IncomeAccount")
                        .WithMany()
                        .HasForeignKey("IncomeAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_fee_configurations_accounting_charts_income_account_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.Periodicities.Periodicity", "Periodicity")
                        .WithMany()
                        .HasForeignKey("PeriodicityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_fee_configurations_periodicity_periodicity_id");

                    b.Navigation("IncomeAccount");

                    b.Navigation("Periodicity");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.FeeConfigurations.MemberTypeFee", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Masters.FeeConfigurations.FeeConfiguration", "FeeConfiguration")
                        .WithMany()
                        .HasForeignKey("FeeConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_member_types_fees_fee_configurations_fee_configuration_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.MemberTypes.MemberType", "MemberType")
                        .WithMany()
                        .HasForeignKey("MemberTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_member_types_fees_member_types_member_type_id");

                    b.Navigation("FeeConfiguration");

                    b.Navigation("MemberType");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Menus.MenuItemOption", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Masters.Menus.MenuItemOption", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_menu_item_options_menu_item_options_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Menus.MenuRole", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Masters.Menus.MenuItemOption", null)
                        .WithMany("Roles")
                        .HasForeignKey("MenuItemOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_roles_menu_item_options_menu_item_option_id");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.SpaceAvailabilities.SpaceAvailability", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Masters.Spaces.Space", "Space")
                        .WithMany()
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_space_availabilities_space_space_id");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.SpacePhotos.SpacePhoto", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Masters.Spaces.Space", "Space")
                        .WithMany()
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_space_photos_spaces_space_id");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.SpaceRates.SpaceRate", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Masters.MemberTypes.MemberType", "MemberType")
                        .WithMany()
                        .HasForeignKey("MemberTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_space_rates_member_types_member_type_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.Spaces.Space", "Space")
                        .WithMany()
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_space_rates_spaces_space_id");

                    b.Navigation("MemberType");

                    b.Navigation("Space");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Spaces.Space", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Masters.AccountingCharts.AccountingChart", "IncomeAccount")
                        .WithMany()
                        .HasForeignKey("IncomeAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_spaces_accounting_charts_income_account_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.SpaceTypes.SpaceType", "SpaceType")
                        .WithMany()
                        .HasForeignKey("SpaceTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_spaces_space_type_space_type_id");

                    b.Navigation("IncomeAccount");

                    b.Navigation("SpaceType");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Ubigeos.Ubigeo", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Masters.Ubigeos.Ubigeo", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_ubigeos_ubigeos_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Users.RolePermission", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Masters.Permissions.Permission", null)
                        .WithMany("_rolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Users.User", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Features.Members.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_users_members_member_id");

                    b.HasOne("NexaSoft.Club.Domain.Masters.UserTypes.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_user_type_user_type_id");

                    b.Navigation("Member");

                    b.Navigation("UserType");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Users.UserQrHistory", b =>
                {
                    b.HasOne("NexaSoft.Club.Domain.Masters.Users.User", "User")
                        .WithMany("QrHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_qr_historys_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Features.Payments.Payment", b =>
                {
                    b.Navigation("PaymentItems");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Menus.MenuItemOption", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Permissions.Permission", b =>
                {
                    b.Navigation("_rolePermissions");
                });

            modelBuilder.Entity("NexaSoft.Club.Domain.Masters.Users.User", b =>
                {
                    b.Navigation("QrHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
